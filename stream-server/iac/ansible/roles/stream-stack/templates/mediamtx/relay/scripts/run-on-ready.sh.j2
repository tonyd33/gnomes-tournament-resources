#!/bin/bash

set -euo pipefail

while [ $# -gt 0 ]; do
  case "$1" in
    --mtx-path) MTX_PATH="$2"; shift 2;;
    --mtx-query) MTX_QUERY="$2"; shift 2;;
    --rtsp-port) RTSP_PORT="$2"; shift 2;;
    *)
      echo "Invalid argument"
      exit 1
      ;;
  esac
done

INPUT="rtsp://localhost:$RTSP_PORT/$MTX_PATH"
RECORDING_URL="rtsp://{{stream_stack_recording.container}}:8554/$MTX_PATH"
PLAYBACK_URL="rtsp://{{stream_stack_playback.container}}:8554/$MTX_PATH"
PLAYBACK_HLS_URL="rtsp://{{stream_stack_playback_hls.container}}:8554/$MTX_PATH"

# TODO: Check _all_ video/audio streams
VIDEO_CODEC=$(
  ffprobe \
    -timeout 1000 \
    -v error \
    -select_streams v:0 \
    -show_entries stream=codec_name \
    -of csv=p=0 \
    "$INPUT" ||\
    echo unknown
)
AUDIO_CODEC=$(
  ffprobe \
    -timeout 1000 \
    -v error \
    -select_streams a:0 \
    -show_entries stream=codec_name \
    -of csv=p=0 \
    "$INPUT" ||\
    echo unknown
)


SUPPORTED_VIDEO_CODECS=$(cat <<EOF
h264
av1
vp9
EOF
)
SUPPORTED_AUDIO_CODECS=$(cat<<EOF
opus
aac
EOF
)

HLS_VIDEO_TRANSCODING_OPTIONS=(-c:v copy)
HLS_AUDIO_TRANSCODING_OPTIONS=(-c:a copy)

echo "Stream has video encoding $VIDEO_CODEC and audio encoding $AUDIO_CODEC." >&2

# If we absolutely must transcode, we have to keep the transcoding resource
# usage to a minimum. We're tee'ing to 2 other locations already
if ! echo "$SUPPORTED_VIDEO_CODECS" | grep "$VIDEO_CODEC" > /dev/null; then
  # We're currently planning to use this only as a way for contestants to test
  # their streams, not to be used for actual viewing, so we want to save as much
  # resources as possible while transcoding to an HLS-compatible format.
  echo "Incompatible video codec, will transcode to h264." >&2
  # Pad width/height because it may otherwise causes an error with libx264 for
  # some reason
  # https://stackoverflow.com/a/20848224
  HLS_VIDEO_TRANSCODING_OPTIONS=(
    -c:v libx264
    -crf 28
    -preset superfast
    -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2"
  )
fi

if ! echo "$SUPPORTED_AUDIO_CODECS" | grep "$AUDIO_CODEC" > /dev/null; then
  echo "Incompatible audio codec, will transcode to aac." >&2
  HLS_AUDIO_TRANSCODING_OPTIONS=(-c:a aac -b:a 128k)
fi

HLS_TRANSCODING_OPTIONS=(
  "${HLS_VIDEO_TRANSCODING_OPTIONS[@]}"
  "${HLS_AUDIO_TRANSCODING_OPTIONS[@]}"
)

# Tee the streams.
ffmpeg -i "$INPUT" \
  -c copy -f rtsp "$RECORDING_URL" \
  -c copy -f rtsp "$PLAYBACK_URL" \
  "${HLS_TRANSCODING_OPTIONS[@]}" -f rtsp "$PLAYBACK_HLS_URL"
